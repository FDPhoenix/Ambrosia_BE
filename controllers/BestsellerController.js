const BookingDish = require("../models/BookingDish");
const Dish = require("../models/Dish");

// L·∫•y danh s√°ch m√≥n ƒÉn bestseller
exports.getBestSellers = async (req, res) => {
  const { limit, month, year } = req.query;

  try {
    // T·∫°o ƒëi·ªÅu ki·ªán l·ªçc theo th√°ng/nƒÉm n·∫øu c√≥
    let dateFilter = {};
    if (month && year) {
      const startDate = new Date(year, month - 1, 1); // B·∫Øt ƒë·∫ßu t·ª´ ng√†y 1 c·ªßa th√°ng
      const endDate = new Date(year, month, 0, 23, 59, 59, 999); // K·∫øt th√∫c v√†o ng√†y cu·ªëi th√°ng
      dateFilter = {
        "booking.createdAt": {
          $gte: startDate,
          $lte: endDate,
        },
      };
    }

    // Truy v·∫•n t·ªïng h·ª£p t·ª´ BookingDish
    const bestSellers = await BookingDish.aggregate([
      // Join v·ªõi Booking ƒë·ªÉ l·∫•y th√¥ng tin th·ªùi gian
      {
        $lookup: {
          from: "bookings",
          localField: "bookingId",
          foreignField: "_id",
          as: "booking",
        },
      },
      { $unwind: "$booking" },
      // √Åp d·ª•ng b·ªô l·ªçc th·ªùi gian (n·∫øu c√≥)
      { $match: dateFilter },
      // Nh√≥m theo dishId v√† t√≠nh t·ªïng quantity
      {
        $group: {
          _id: "$dishId",
          totalQuantity: { $sum: "$quantity" },
        },
      },
      // S·∫Øp x·∫øp theo totalQuantity gi·∫£m d·∫ßn
      { $sort: { totalQuantity: -1 } },
      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£
      { $limit: parseInt(limit) || 10 },
      // Join v·ªõi Dish ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt
      {
        $lookup: {
          from: "dishes",
          localField: "_id",
          foreignField: "_id",
          as: "dishDetails",
        },
      },
      { $unwind: "$dishDetails" },
      // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ƒë·∫ßu ra
      {
        $project: {
          dishId: "$_id",
          name: "$dishDetails.name",
          imageUrl: "$dishDetails.imageUrl",
          description: "$dishDetails.description",
          price: "$dishDetails.price",
          totalQuantity: 1,
        },
      },
    ]);

    // Th√¥ng b√°o th·ªùi gian l·ªçc (n·∫øu c√≥)
    const filterMessage = month && year
      ? `Danh s√°ch m√≥n ƒÉn bestseller trong th√°ng ${month}/${year}`
      : "Danh s√°ch m√≥n ƒÉn bestseller t·ªïng qu√°t";

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(200).json({
      success: true,
      message: filterMessage,
      data: bestSellers,
    });
  } catch (error) {
    console.error("üö® L·ªói khi l·∫•y danh s√°ch bestseller:", error.message);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch bestseller!",
      error: error.message,
    });
  }
};

